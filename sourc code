import pandas as pd

from sklearn.model_selection import train_test_split

from sklearn.ensemble import RandomForestClassifier

from sklearn.metrics import classification_report, confusion_matrix

import seaborn as sns

import matplotlib.pyplot as plt


# Load Dataset (you can download the dataset from Kaggle)


df = pd.read_csv('creditcard.csv')


# Preprocessing

X = df.drop(['Class'], axis=1)

y = df['Class']  # 0 = legit, 1 = fraud


# Train/Test split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, 
random_state=42)


# Train model

model = RandomForestClassifier(n_estimators=100, random_state=42)

model.fit(X_train, y_train)


# Predict

y_pred = model.predict(X_test)


# Evaluation

print("Classification Report:")

print(classification_report(y_test, y_pred))

# Confusion Matrix

cm = confusion_matrix(y_test, y_pred)

sns.heatmap(cm, annot=True, fmt='d')

plt.title("Confusion Matrix")

plt.xlabel("Predicted")

plt.ylabel("Actual")

plt.show()


# Real-time Simulation (basic)

def detect_fraud(transaction):

    df_transaction = pd.DataFrame([transaction])

    prediction = model.predict(df_transaction)[0]

    return "Fraudulent" if prediction == 1 else "Legitimate"



# Example transaction (must match dataset features)

example_transaction = X.iloc[0].to_dict()

print("Transaction status:", detect_fraud(example_transaction))
